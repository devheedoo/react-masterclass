{"version":3,"sources":["TodoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["TodoList","useForm","defaultValues","email","register","handleSubmit","formState","getValues","setError","trigger","useEffect","style","display","flexDirection","onSubmit","inputValues","required","minLength","value","message","pattern","placeholder","errors","userId","type","password","validate","repassword","firstName","lastName","noAdmin","username","includes","noDev","GlobalStyle","createGlobalStyle","props","theme","backgroundColor","textColor","App","ReactDOM","render","StrictMode","accentColor","document","getElementById"],"mappings":"uNAuJeA,I,EAAAA,EAtIf,WAAqB,IAAD,4BAClB,EACEC,YAAe,CACbC,cAAe,CACbC,MAPqB,gBAInBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,UAAqBC,GAArD,EAA2CC,SAA3C,EAAqDD,WAAWE,EAAhE,EAAgEA,QAiBhE,OAJAC,qBAAU,WACRD,MACC,IAGD,8BACE,uBACEE,MAAO,CAAEC,QAAS,OAAQC,cAAe,UACzCC,SAAUT,GAdA,SAACU,GACX,KAWF,UAIE,iDACMX,EAAS,SAAU,CACrBY,SAAU,iBACVC,UAAW,CACTC,MAAO,EACPC,QAAS,gDAEXC,QAAS,CACPF,MAAO,iBACPC,QAAS,kDATf,IAYEE,YAAY,QAEd,yCAAOf,EAAUgB,cAAjB,iBAAO,EAAkBC,cAAzB,aAAO,EAA0BJ,UAEjC,iDACMf,EAAS,WAAY,CACvBY,SAAU,uBACVC,UAAW,CACTC,MAAO,EACPC,QAAS,gDAEXC,QAAS,CACPF,MAAO,iBACPC,QAAS,wDATf,IAYEK,KAAK,WACLH,YAAY,cAEd,yCAAOf,EAAUgB,cAAjB,iBAAO,EAAkBG,gBAAzB,aAAO,EAA4BN,UAEnC,iDACMf,EAAS,aAAc,CACzBY,SAAU,0BACVU,SAAU,SAACC,GAAD,OACRA,IAAepB,IAAYkB,UACvB,wCALV,IAQED,KAAK,WACLH,YAAY,iBAEd,yCAAOf,EAAUgB,cAAjB,iBAAO,EAAkBK,kBAAzB,aAAO,EAA8BR,UAErC,iDACMf,EAAS,YAAa,CACxBY,SAAU,yBACVI,QAAS,CACPF,MAAO,iBACPC,QAAS,0DALf,IAQEE,YAAY,gBAEd,yCAAOf,EAAUgB,cAAjB,iBAAO,EAAkBM,iBAAzB,aAAO,EAA6BT,UAEpC,iDACMf,EAAS,WAAY,CACvBY,SAAU,wBACVI,QAAS,CACPF,MAAO,iBACPC,QAAS,yDALf,IAQEE,YAAY,eAEd,yCAAOf,EAAUgB,cAAjB,iBAAO,EAAkBO,gBAAzB,aAAO,EAA4BV,UAEnC,iDACMf,EAAS,QAAS,CACpBY,SAAU,oBACVI,QAAS,CACPF,MAAO,gCACPC,QAAS,yCALf,IAQEE,YAAY,WAEd,yCAAOf,EAAUgB,cAAjB,iBAAO,EAAkBnB,aAAzB,aAAO,EAAyBgB,UAEhC,iDACMf,EAAS,WAAY,CACvBY,SAAU,uBACVC,UAAW,CACTC,MAAO,EACPC,QAAS,0CAEXC,QAAS,CACPF,MAAO,iBACPC,QAAS,qDAEXO,SAAU,CACRI,QAAS,SAACC,GAAD,OACPA,EAASC,SAAS,UAAW,qBAC/BC,MAAO,SAACF,GAAD,OACLA,EAASC,SAAS,QAAS,uBAfnC,IAkBEX,YAAY,cAEd,yCAAOf,EAAUgB,cAAjB,iBAAO,EAAkBS,gBAAzB,aAAO,EAA4BZ,UAEnC,+CC9IFe,EAAcC,YAAH,o5CA8BO,SAACC,GAAD,OAAWA,EAAMC,MAAMC,mBAClC,SAACF,GAAD,OAAWA,EAAMC,MAAME,aAmCrBC,MATf,WACE,OACE,qCACE,cAACN,EAAD,IACA,cAAC,EAAD,QCzDNO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAeN,MCRkB,CACrCC,gBAAiB,UACjBC,UAAW,UACXK,YAAa,WDKT,SACE,cAAC,EAAD,UAINC,SAASC,eAAe,W","file":"static/js/main.de52ea3b.chunk.js","sourcesContent":["import { useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\n\ninterface IForm {\n  userId: string;\n  password: string;\n  repassword: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  username: string;\n  serverError?: string;\n}\n\nconst EMAIL_DOMAIN_ALLOWED = '@gmail.com';\nconst IS_API_SERVER_LIVE = true;\n\nfunction TodoList() {\n  const { register, handleSubmit, formState, setError, getValues, trigger } =\n    useForm<IForm>({\n      defaultValues: {\n        email: EMAIL_DOMAIN_ALLOWED,\n      },\n    });\n\n  const onValid = (inputValues: IForm) => {\n    if (!IS_API_SERVER_LIVE) {\n      setError('serverError', { message: 'API server is not working' });\n    }\n  };\n\n  useEffect(() => {\n    trigger();\n  }, []);\n\n  return (\n    <div>\n      <form\n        style={{ display: 'flex', flexDirection: 'column' }}\n        onSubmit={handleSubmit(onValid)}\n      >\n        <input\n          {...register('userId', {\n            required: 'ID is required',\n            minLength: {\n              value: 5,\n              message: 'Length of first name should be longer than 4',\n            },\n            pattern: {\n              value: /^[A-Za-z0-9]+$/,\n              message: 'Only alphabet and number are allowed for ID',\n            },\n          })}\n          placeholder=\"ID\"\n        />\n        <span>{formState.errors?.userId?.message}</span>\n\n        <input\n          {...register('password', {\n            required: 'Password is required',\n            minLength: {\n              value: 8,\n              message: 'Length of first name should be longer than 7',\n            },\n            pattern: {\n              value: /^[A-Za-z0-9]+$/,\n              message: 'Only alphabet and number are allowed for password',\n            },\n          })}\n          type=\"password\"\n          placeholder=\"password\"\n        />\n        <span>{formState.errors?.password?.message}</span>\n\n        <input\n          {...register('repassword', {\n            required: 'Re-password is required',\n            validate: (repassword) =>\n              repassword !== getValues().password\n                ? 're-password should match password'\n                : true,\n          })}\n          type=\"password\"\n          placeholder=\"re-password\"\n        />\n        <span>{formState.errors?.repassword?.message}</span>\n\n        <input\n          {...register('firstName', {\n            required: 'first name is required',\n            pattern: {\n              value: /^[A-Za-z0-9]+$/,\n              message: 'Only alphabet and number are allowed for first name',\n            },\n          })}\n          placeholder=\"first name\"\n        />\n        <span>{formState.errors?.firstName?.message}</span>\n\n        <input\n          {...register('lastName', {\n            required: 'last name is required',\n            pattern: {\n              value: /^[A-Za-z0-9]+$/,\n              message: 'Only alphabet and number are allowed for last name',\n            },\n          })}\n          placeholder=\"last name\"\n        />\n        <span>{formState.errors?.lastName?.message}</span>\n\n        <input\n          {...register('email', {\n            required: 'Email is required',\n            pattern: {\n              value: /^[A-Za-z0-9._%+-]+@gmail.com$/,\n              message: 'only @gmail.com emails are allowed',\n            },\n          })}\n          placeholder=\"email\"\n        />\n        <span>{formState.errors?.email?.message}</span>\n\n        <input\n          {...register('username', {\n            required: 'Username is required',\n            minLength: {\n              value: 5,\n              message: 'Length of name should be longer than 4',\n            },\n            pattern: {\n              value: /^[A-Za-z0-9]+$/,\n              message: 'Only alphabet and number are allowed for username',\n            },\n            validate: {\n              noAdmin: (username) =>\n                username.includes('admin') ? 'no admins allowed' : true,\n              noDev: (username) =>\n                username.includes('dev') ? 'no devs allowed' : true,\n            },\n          })}\n          placeholder=\"username\"\n        />\n        <span>{formState.errors?.username?.message}</span>\n\n        <button>add</button>\n      </form>\n    </div>\n  );\n}\n\nexport default TodoList;\n","import { createGlobalStyle } from \"styled-components\";\nimport TodoList from \"./TodoList\";\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=Ubuntu&display=swap');\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed, \n  figure, figcaption, footer, header, hgroup, \n  menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n  /* HTML5 display-role reset for older browsers */\n  article, aside, details, figcaption, figure, \n  footer, header, hgroup, menu, nav, section {\n    display: block;\n  }\n  body {\n    line-height: 1;\n    font-family: 'Ubuntu', sans-serif;\n    background-color: ${(props) => props.theme.backgroundColor};\n    color: ${(props) => props.theme.textColor};\n  }\n  ol, ul {\n    list-style: none;\n  }\n  blockquote, q {\n    quotes: none;\n  }\n  blockquote:before, blockquote:after,\n  q:before, q:after {\n    content: '';\n    content: none;\n  }\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n  a {\n    text-decoration: none;\n    color: inherit\n  }\n  * {\n    box-sizing: border-box;\n  }\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <TodoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  backgroundColor: \"#7f8c8d\",\n  textColor: \"#ecf0f1\",\n  accentColor: \"#f1c40f\",\n};\n"],"sourceRoot":""}